{"version":3,"sources":["components/HeaderBar/MenuCategory.tsx","components/HeaderBar/MenuOption.tsx","hooks/useEditorState.tsx","components/HeaderBar/FileLoadModal.tsx","logic/fileOperations.ts","components/HeaderBar/HeaderBar.tsx","data/tileInfo.ts","components/BlockPalette/BlockPalette.tsx","components/LevelEditor/TileGrid.tsx","components/LevelEditor/LevelEditor.tsx","components/MobSidebar/MobInfo.tsx","components/MobSidebar/MobSidebar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MenuCategory","props","useState","open","setOpen","className","onClick","o","onMouseLeave","name","children","MenuOption","callback","getBlankTileGrid","Array","fill","EditorStateContext","createContext","leftClickPressed","rightClickPressed","foregroundVisible","leftClickTileId","rightClickTileId","foregroundTiles","backgroundTiles","levelData","ArrayBuffer","mobs","setLeftClickPressed","b","Error","setRightClickPressed","toggleForegroundVisible","setLeftClickTileId","tileId","setRightClickTileId","setLevelData","data","setForegroundTiles","tiles","setBackgroundTiles","setMobs","placeForegroundTileAtIndex","index","placeBackgroundTileAtIndex","pickTile","useEditorState","useContext","EditorStateProvider","setForegroundVisible","bt","slice","ft","value","useMemo","fv","id","Provider","FileLoadModal","shown","onDismiss","evt","stopPropagation","onSubmit","files","currentTarget","elements","fileInput","length","onConfirm","preventDefault","type","numMobsOffset","readFile","inputFile","a","Promise","resolve","reader","FileReader","onloadend","result","readAsArrayBuffer","getBackgroundLayer","fileData","view","Uint16Array","bgoffset","background","i","push","getForegroundLayer","fgoffset","foreground","parseMob","mobData","extraData","rawData","Uint8Array","ptr","skip","extraDataLength","startCoords","Float32Array","startingCoordinates","x","y","flippedH","Int32Array","nameEndPtr","TextDecoder","decode","numPathCoordinates","pathCoordinates","pathCoords","getMobs","numMobs","mobDataStart","delimiterCount","map","HeaderBar","fileLoadModalShown","setFileLoadModalShown","fileToLoad","console","log","fileContents","tileInfo","getBlocks","_","xOffset","yOffset","Math","floor","description","getBlockWithIndex","BlockPalette","blocks","setBlocks","handleBlockSelection","button","useEffect","style","left","selectionClass","onContextMenu","backgroundPositionX","backgroundPositionY","TileGrid","offset","getOffsetForTileId","onMouseDown","onTilePlaced","onTilePicked","handleMouseDown","onMouseMove","handleMouseMove","LevelEditor","backgroundColor","m","pathStartString","pathContinuationString","p","pathString","join","width","height","stroke","strokeWidth","d","bottom","src","process","alt","pc","opacity","MobInfo","mob","disabled","checked","MobSidebar","right","App","onMouseUp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0122984b.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport default function MenuCategory(props: {name: string, children?: any}) {\n    const [open, setOpen] = useState(false);\n\n    return (\n        <div\n            className=\"MenuCategory\"\n            onClick={() => setOpen(o => !o)}\n            onMouseLeave={() => setOpen(false)}\n        >\n            <span>{props.name}</span>\n            { open ? <ul>{props.children}</ul> : null }\n        </div>\n    );\n}","export default function MenuOption(props: {name: string, callback(): void}) {\n    return (\n        <li\n            onClick={ props.callback }\n        >\n            {props.name}\n        </li>\n    );\n}","import { createContext, useContext, useMemo, useState } from \"react\";\nimport Mob from \"../models/mob\";\n\nexport interface EditorState {\n    leftClickPressed: boolean;\n    rightClickPressed: boolean;\n    foregroundVisible: boolean;\n    leftClickTileId: number;\n    rightClickTileId: number;\n    foregroundTiles: Array<number>;\n    backgroundTiles: Array<number>;\n    levelData: ArrayBuffer;\n    mobs: Array<Mob>;\n    setLeftClickPressed(pressed: boolean): void;\n    setRightClickPressed(pressed: boolean): void;\n    toggleForegroundVisible(): void;\n    setLeftClickTileId(tileId: number): void;\n    setRightClickTileId(tileId: number): void;\n    setLevelData(data: ArrayBuffer): void;\n    setForegroundTiles(tiles: Array<number>): void;\n    setBackgroundTiles(tiles: Array<number>): void;\n    setMobs(mobs: Array<Mob>): void;\n    placeForegroundTileAtIndex(tileId: number, index: number): void,\n    placeBackgroundTileAtIndex(tileId: number, index: number): void,\n    pickTile(tileId: number): void,\n}\n\nfunction getEmptyEditorState(): EditorState {\n    return {\n        leftClickPressed: false,\n        rightClickPressed: false,\n        foregroundVisible: true,\n        leftClickTileId: 0,\n        rightClickTileId: 0,\n        foregroundTiles: getBlankTileGrid(),\n        backgroundTiles: getBlankTileGrid(),\n        levelData: new ArrayBuffer(0),\n        mobs: new Array<Mob>(),\n        setLeftClickPressed: (b: boolean) => { throw new Error(\"Editor State Context not found\") },\n        setRightClickPressed: (b: boolean) => { throw new Error(\"Editor State Context not found\") },\n        toggleForegroundVisible: () => { throw new Error(\"Editor State Context not found\") },\n        setLeftClickTileId: (tileId: number) => { throw new Error(\"Editor State Context not found\") },\n        setRightClickTileId: (tileId: number) => { throw new Error(\"Editor State Context not found\") },\n        setLevelData: (data: ArrayBuffer) => { throw new Error(\"Editor State Context not found\") },\n        setForegroundTiles: (tiles: Array<number>) => { throw new Error(\"Editor State Context not found\") },\n        setBackgroundTiles: (tiles: Array<number>) => { throw new Error(\"Editor State Context not found\") },\n        setMobs: (mobs: Array<Mob>) => { throw new Error(\"Editor State Context not found\") },\n        placeForegroundTileAtIndex: (tileId: number, index: number) => { throw new Error(\"Editor State Context not found\") },\n        placeBackgroundTileAtIndex: (tileId: number, index: number) => { throw new Error(\"Editor State Context not found\") },\n        pickTile: (tileId: number) => { throw new Error(\"Editor State Context not found\") },\n    }\n}\n\nfunction getBlankTileGrid(): Array<number> {\n    return Array(20 * 15).fill(0);\n}\n\nexport const EditorStateContext = createContext(getEmptyEditorState());\n\nexport default function useEditorState() {\n    return useContext(EditorStateContext);\n}\n\nexport function EditorStateProvider(props: {children: any}) {\n    const [leftClickPressed, setLeftClickPressed] = useState(false);\n    const [rightClickPressed, setRightClickPressed] = useState(false);\n    const [foregroundVisible, setForegroundVisible] = useState(true);\n    const [leftClickTileId, setLeftClickTileId] = useState(0);\n    const [rightClickTileId, setRightClickTileId] = useState(0);\n    const [backgroundTiles, setBackgroundTiles] = useState(getBlankTileGrid());\n    const [foregroundTiles, setForegroundTiles] = useState(getBlankTileGrid());\n    const [levelData, setLevelData] = useState(new ArrayBuffer(0));\n    const [mobs, setMobs] = useState([] as Array<Mob>);\n\n    function placeBackgroundTileAtIndex(index: number, tileId: number) {\n        setBackgroundTiles((bt) => {\n            return [...bt.slice(0, index), tileId, ...bt.slice(index + 1)];\n        });\n    }\n\n    function placeForegroundTileAtIndex(index: number, tileId: number) {\n        setForegroundTiles((ft) => {\n            return [...ft.slice(0, index), tileId, ...ft.slice(index + 1)];\n        });\n    }\n\n    function pickTile(tileId: number) {\n        setLeftClickTileId(tileId);\n    }\n\n    const value = useMemo(() => ({\n        leftClickPressed,\n        rightClickPressed,\n        foregroundVisible,\n        leftClickTileId,\n        rightClickTileId,\n        foregroundTiles,\n        backgroundTiles,\n        levelData,\n        mobs,\n        setLeftClickPressed,\n        setRightClickPressed,\n        toggleForegroundVisible: () => setForegroundVisible(fv => !fv),\n        setLeftClickTileId: (id: number) => setLeftClickTileId(id),\n        setRightClickTileId: (id: number) => setRightClickTileId(id),\n        setLevelData: (data: ArrayBuffer) => setLevelData(data),\n        setForegroundTiles: (tiles: Array<number>) => setForegroundTiles(tiles),\n        setBackgroundTiles: (tiles: Array<number>) => setBackgroundTiles(tiles),\n        setMobs: (mobs: Array<Mob>) => setMobs(mobs),\n        placeForegroundTileAtIndex,\n        placeBackgroundTileAtIndex,\n        pickTile,\n    }), [leftClickPressed, rightClickPressed, foregroundVisible, leftClickTileId, rightClickTileId, foregroundTiles, backgroundTiles, levelData, mobs]);\n\n    return (\n        <EditorStateContext.Provider value={value}>\n            { props.children }\n        </EditorStateContext.Provider>\n    );\n}","interface FileLoadFormElement extends HTMLFormElement {\r\n    readonly elements: FileLoadFormElements;\r\n}\r\n\r\ninterface FileLoadFormElements extends HTMLFormControlsCollection{\r\n    readonly fileInput: HTMLInputElement;\r\n}\r\n\r\nexport default function FileLoadModal(props: {shown: boolean, onDismiss(): void, onConfirm(fileToLoad: File): void}) {\r\n    if (!props.shown) {\r\n        return null;\r\n    }\r\n\r\n    function handleSubmit(evt: React.FormEvent<FileLoadFormElement>) {\r\n        const files = evt.currentTarget.elements.fileInput.files;\r\n        if (files?.length) {\r\n            props.onConfirm(files[0]);\r\n        }\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className=\"FileLoadBackdrop\" onClick={props.onDismiss}>\r\n            <div className=\"FileLoadModal\" onClick={evt => evt.stopPropagation()}>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <input name=\"fileInput\" type=\"file\" />\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\">Load into editor</button>\r\n                        <button onClick={props.onDismiss}>Cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import Mob from \"../models/mob\";\r\n\r\nconst bgoffset = 88;\r\nconst fgoffset = 756;\r\nconst numMobsOffset = 1360;\r\n\r\nexport async function readFile(inputFile: File): Promise<ArrayBuffer> {\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader()\r\n    reader.onloadend = () => resolve(reader.result as ArrayBuffer)\r\n    reader.readAsArrayBuffer(inputFile);\r\n  });\r\n}\r\n\r\nexport function getBackgroundLayer(fileData: ArrayBuffer) {\r\n  const view = new Uint16Array(fileData.slice(bgoffset, bgoffset + 20 * 15 * 2));\r\n  let background = [];\r\n  for (var i = 0; i < 20 * 15; i++) {\r\n    background.push(view[i]);\r\n  }\r\n  return background;\r\n}\r\n\r\nexport function getForegroundLayer(fileData: ArrayBuffer) {\r\n  const view = new Uint16Array(fileData.slice(fgoffset, fgoffset + 20 * 15 * 2));\r\n  let foreground = [];\r\n  for (var i = 0; i < 20 * 15; i++) {\r\n    foreground.push(view[i]);\r\n  }\r\n  return foreground;\r\n}\r\n\r\nfunction parseMob(mobData: ArrayBuffer, id: number): Mob {\r\n  const rawData = new Uint8Array(mobData);\r\n  let ptr = 0;\r\n  let extraData = null;\r\n  let skip = 3;\r\n  if (id !== 0) {\r\n    skip = 4;\r\n  }\r\n\r\n  let extraDataLength = 0;\r\n  if (rawData[0] & 0x10) {\r\n    extraDataLength = 4;\r\n  }\r\n  if (rawData[0] & 0x01) {\r\n    extraDataLength += 4;\r\n  }\r\n  extraData = mobData.slice(skip, skip + extraDataLength);\r\n  ptr += skip + extraDataLength;\r\n\r\n  const startCoords = new Float32Array(mobData.slice(ptr, ptr + 8));\r\n  const startingCoordinates = {\r\n    x: startCoords[0],\r\n    y: startCoords[1]\r\n  }\r\n  ptr += 8;\r\n\r\n  const flippedH = !!new Int32Array(mobData.slice(ptr, ptr + 4));\r\n  ptr += 4;\r\n\r\n  let nameEndPtr = ptr;\r\n  while(rawData[nameEndPtr]) {\r\n    nameEndPtr++;\r\n  }\r\n  const name = new TextDecoder().decode(new Uint8Array(mobData.slice(ptr, nameEndPtr)));\r\n  ptr = nameEndPtr + 1;\r\n\r\n  const numPathCoordinates = rawData[ptr];\r\n  ptr += 4;\r\n\r\n  let pathCoordinates = [];\r\n\r\n  for (let i = 0; i < numPathCoordinates; i++) {\r\n    const pathCoords = new Float32Array(mobData.slice(ptr, ptr + 8));\r\n    pathCoordinates.push({\r\n      x: pathCoords[0],\r\n      y: pathCoords[1]\r\n    });\r\n    ptr += 8;\r\n  }\r\n\r\n  return {\r\n    id,\r\n    rawData,\r\n    extraData,\r\n    startingCoordinates,\r\n    flippedH,\r\n    name,\r\n    pathCoordinates\r\n  }\r\n}\r\n\r\nexport function getMobs(fileData: ArrayBuffer): Array<Mob> {\r\n  const view = new Uint8Array(fileData.slice(numMobsOffset));\r\n  const numMobs = view[0];\r\n  let ptr = 1;\r\n  let mobDataStart = ptr;\r\n  let delimiterCount = 0;\r\n  let mobs = [];\r\n  while (mobs.length < numMobs) {\r\n    while (delimiterCount < 8 || view[ptr] === 0xFF) {\r\n      if (view[ptr] === 0xFF) {\r\n        delimiterCount++;\r\n      } else {\r\n        delimiterCount = 0;\r\n      }\r\n      ptr++;\r\n    }\r\n    mobs.push(fileData.slice(numMobsOffset + mobDataStart, numMobsOffset + ptr));\r\n    mobDataStart = ptr;\r\n    delimiterCount = 0;\r\n  }\r\n  return mobs.map(parseMob);\r\n}\r\n\r\n/*\r\nfunction loadFileToEditor() {\r\n  levelData = tmpLevelData;\r\n  tmpLevelData = \"\";\r\n  closeLoadDialog();\r\n  var numMobsOffset = 1360;\r\n  var bg = document.getElementById('workspace');\r\n  var fg = document.getElementById('workspacefg');\r\n  for (var i = 0; i < 20 * 15; i++) {\r\n    var tile = levelData.charCodeAt(bgoffset + i * 2);\r\n    tile += levelData.charCodeAt((bgoffset + i * 2 + 1)) * 256;\r\n    placeAtIndex(0, i, tile);\r\n  }\r\n  for (var i = 0; i < 20 * 15; i++) {\r\n    var tile = levelData.charCodeAt(fgoffset + i * 2);\r\n    tile += levelData.charCodeAt((fgoffset + i * 2 + 1)) * 256;\r\n    placeAtIndex(1, i, tile);\r\n  }\r\n  var numMobs = levelData.charCodeAt(numMobsOffset);\r\n  console.log(\"Loading \" + numMobs + \" mobs.\");\r\n  var mobInfo = document.getElementById('mobinfo');\r\n  for (var i = mobInfo.children.length - 1; i >= 0; i--) {\r\n    mobInfo.removeChild(mobInfo.children[i]);\r\n  }\r\n  var mobDelim = String.fromCharCode(255);\r\n  mobDelim += mobDelim;\r\n  mobDelim += mobDelim;\r\n  mobDelim += mobDelim;\r\n  var mobArray = levelData.substr(numMobsOffset, levelData.length).split(mobDelim);\r\n  for (var i = 0; i < numMobs; i++) {\r\n    var mobHolder = document.createElement('div');\r\n    var mobTitle = document.createElement('span');\r\n    var mobData = document.createElement('textarea');\r\n    mobHolder.className = \"mobholder\";\r\n    mobTitle.innerText = \"A mob\";\r\n    console.log(parseMob(mobArray[i], i === 0));\r\n    for (var j = 0; j < mobArray[i].length; j++) {\r\n      var temp = mobArray[i].charCodeAt(j).toString(16);\r\n      if (temp.length === 1) {\r\n        temp = \"0\" + temp;\r\n      }\r\n      mobData.value += temp;\r\n    }\r\n    mobData.style.width = \"100%\";\r\n    mobData.style.height = \"50px\";\r\n    mobData.style.resize = \"vertical\";\r\n    mobHolder.appendChild(mobTitle);\r\n    mobHolder.appendChild(mobData);\r\n    mobInfo.appendChild(mobHolder);\r\n  }\r\n}\r\n\r\nfunction newFile() {\r\n  levelData = \"\";\r\n  var bg = document.getElementById('workspace');\r\n  var fg = document.getElementById('workspacefg');\r\n  for (var i = 0; i < 20 * 15; i++) {\r\n    placeAtIndex(0, i, 0);\r\n    placeAtIndex(1, i, 0);\r\n  }\r\n}\r\n\r\nfunction saveFile(levelName: string, levelData: string, backgroundTiles: Array<number>, foregroundTiles: Array<number>) {\r\n\r\n  var firstChunk = levelData.substr(0, bgoffset);\r\n  var secondChunk = levelData.substr(688, 68);\r\n  var thirdChunk = levelData.substr(1356, levelData.length);\r\n  var bgData = \"\";\r\n  var fgData = \"\";\r\n  for (var i = 0; i < 20 * 15; i++) {\r\n    var bgTile = backgroundTiles[i];\r\n    var fgTile = foregroundTiles[i];\r\n    bgData += String.fromCharCode(bgTile & 255);\r\n    bgData += String.fromCharCode(bgTile >> 8);\r\n    fgData += String.fromCharCode(fgTile & 255);\r\n    fgData += String.fromCharCode(fgTile >> 8);\r\n  }\r\n  levelData = firstChunk + bgData + secondChunk + fgData + thirdChunk;\r\n  var outfile = \"\";\r\n  for (var i = 0; i < levelData.length; i++) {\r\n    var outChar = levelData.charCodeAt(i).toString(16);\r\n    if (outChar.length == 1) {\r\n      outfile += \"0\";\r\n    }\r\n    outfile += outChar;\r\n  }\r\n\r\n  var dlLink = document.createElement('a');\r\n  dlLink.href = \"data:text/plain,\" + outfile;\r\n  dlLink.style.display = \"none\";\r\n  dlLink.download = levelName;\r\n  document.body.appendChild(dlLink);\r\n  dlLink.click();\r\n  document.body.removeChild(dlLink);\r\n}\r\n\r\nfunction parseMob(mobstr: string, isFirstMob: boolean) {\r\n  function readFourBytes(theString: string, thePos: number) {\r\n    var result = theString.charCodeAt(thePos);\r\n    result *= 256;\r\n    result += theString.charCodeAt(thePos + 1);\r\n    result *= 256;\r\n    result += theString.charCodeAt(thePos + 2);\r\n    result *= 256;\r\n    result += theString.charCodeAt(thePos + 3);\r\n    return result;\r\n  }\r\n\r\n  // parse mob code\r\n\r\n  var pointer = 0;\r\n  var extraDataFlag;\r\n  if (isFirstMob) {\r\n    extraDataFlag = 0;\r\n  } else {\r\n    extraDataFlag = mobstr.charCodeAt(pointer);\r\n  }\r\n  var extraData;\r\n  pointer += 4;\r\n  if (extraDataFlag == 0x11) {\r\n    extraData = mobstr.substr(pointer, 8);\r\n    pointer += 8;\r\n  } else if (extraDataFlag == 0x10) {\r\n    extraData = mobstr.substr(pointer, 4);\r\n    pointer += 4;\r\n  } else if (extraDataFlag == 0x01) {\r\n    extraData = mobstr.substr(pointer, 4);\r\n    pointer += 4;\r\n  }\r\n  var coordinates = [];\r\n  coordinates.push([readFourBytes(mobstr, pointer), readFourBytes(mobstr, pointer + 4)]);\r\n  pointer += 8;\r\n  var isFlipped = readFourBytes(mobstr, pointer);\r\n  pointer += 4;\r\n  var name = \"\";\r\n  var curChar = \"\";\r\n  while (curChar != String.fromCharCode(0)) {\r\n    name += curChar;\r\n    curChar = mobstr.charAt(pointer);\r\n    pointer++;\r\n  }\r\n  var numCoords = mobstr.charCodeAt(pointer);\r\n  pointer += 4;\r\n  for (var i = 0; i < numCoords; i++) {\r\n    coordinates.push([readFourBytes(mobstr, pointer), readFourBytes(mobstr, pointer + 4)]);\r\n    pointer += 8;\r\n  }\r\n\r\n  return {\r\n    extraDataFlag,\r\n    extraData,\r\n    isFlipped,\r\n    numCoords,\r\n    coordinates,\r\n    name\r\n  };\r\n}\r\n*/","import MenuCategory from \"./MenuCategory\";\nimport \"./HeaderBar.css\";\nimport MenuOption from \"./MenuOption\";\nimport useEditorState from \"../../hooks/useEditorState\";\nimport { useState } from \"react\";\nimport FileLoadModal from \"./FileLoadModal\";\nimport { getBackgroundLayer, getForegroundLayer, getMobs, readFile } from \"../../logic/fileOperations\";\n\nexport default function HeaderBar() {\n    const { toggleForegroundVisible, setLevelData, setForegroundTiles, setBackgroundTiles, setMobs } = useEditorState();\n    const [fileLoadModalShown, setFileLoadModalShown] = useState(false);\n\n    async function loadFile(fileToLoad: File) {\n        console.log(fileToLoad);\n        const fileContents = await readFile(fileToLoad);\n        setForegroundTiles(getForegroundLayer(fileContents));\n        setBackgroundTiles(getBackgroundLayer(fileContents));\n        const mobs = getMobs(fileContents);\n        console.log(mobs);\n        setMobs(mobs);\n        setLevelData(fileContents);\n        setFileLoadModalShown(false);\n    }\n\n    return <div className=\"HeaderBar\">\n        <MenuCategory name=\"file\">\n            <MenuOption name=\"New\" callback={() => console.log(\"new file\")} />\n            <MenuOption name=\"Open\" callback={() => setFileLoadModalShown(true)} />\n            <MenuOption name=\"Save\" callback={() => console.log(\"save file\")} />\n        </MenuCategory>\n        <MenuCategory name=\"edit\">\n            <MenuOption name=\"Cut\" callback={() => console.log(\"cut\")} />\n            <MenuOption name=\"Copy\" callback={() => console.log(\"copy\")} />\n            <MenuOption name=\"Paste\" callback={() => console.log(\"paste\")} />\n            </MenuCategory>\n        <MenuCategory name=\"view\">\n            <MenuOption name=\"Switch Layer\" callback={toggleForegroundVisible} />\n        </MenuCategory>\n        <FileLoadModal shown={fileLoadModalShown} onConfirm={loadFile} onDismiss={() => setFileLoadModalShown(false)}/>\n    </div>;\n}","export const tileInfo = [\n    \"Empty tile\",\n    \"The left edge of a platform\",\n    \"The middle of a platform\",\n    \"The right edge of a platform\",\n    \"A single brick\",\n    \"A decorative brick\",\n    \"Tileable floor\",\n    \"The left edge of a platform\",\n    \"The middle of a platform\",\n    \"The middle of a platform\",\n    \"The right edge of a platform\",\n    \"A solid on top platform\",\n    \"A single brick\",\n    \"The left edge of a block\",\n    \"The right edge of a block\",\n    \"The left edge of a block\",\n    \"The right edge of a block\",\n    \"The left edge of a block\",\n    \"The right edge of a block\",\n    \"The top edge of a block\",\n    \"The left edge of a block\",\n    \"The right edge of a block\",\n    \"A solid on top platform\",\n    \"The left edge of a block\",\n    \"The right edge of a block\",\n    \"The left edge of a block\",\n    \"The right edge of a block\",\n    \"A solid on top platform\",\n    \"The left edge of a platform\",\n    \"The middle of a platform\",\n    \"The right edge of a platform\",\n    \"The left edge of a platform\",\n    \"The middle of a platform\",\n    \"The middle of a platform\",\n    \"The right edge of a platform\",\n    \"????\",\n    \"????\",\n    \"????\",\n    \"????\",\n    \"The bottom edge of a block\",\n    \"The left edge of a platform\",\n    \"The middle of a platform\",\n    \"The right edge of a platform\",\n    \"The left edge of a platform\",\n    \"The middle of a platform\",\n    \"The right edge of a platform\",\n    \"The left edge of a platform\",\n    \"The middle of a platform\",\n    \"The right edge of a platform\",\n    \"The left edge of a platform\",\n    \"The middle of a platform\",\n    \"The right edge of a platform\",\n    \"A dissolving platform\",\n    \"A dissolving platform\",\n    \"A dissolving platform\",\n    \"A dissolving platform\",\n    \"A dissolving platform\",\n    \"A dissolving platform\",\n    \"????\",\n    \"????\",\n    \"Banana item\",\n    \"Grape item\",\n    \"Cherry item\",\n    \"Watermelon item\",\n    \"Peach item\",\n    \"????\",\n    \"????\"\n];","import { useEffect, useState } from \"react\";\nimport { tileInfo } from \"../../data/tileInfo\";\nimport useEditorState from \"../../hooks/useEditorState\";\nimport \"./BlockPalette.css\";\n\ninterface BlockInfo {\n    id: number;\n    xOffset: number;\n    yOffset: number;\n    description: string;\n}\n\nfunction getBlocks(): Array<BlockInfo> {\n    return Array(340).fill(0).map((_, index) => getBlockWithIndex(index));\n}\n\nfunction getBlockWithIndex(index: number) {\n    return {\n        id: index,\n        xOffset: index % 16 * -32,\n        yOffset: Math.floor(index / 16) * -32,\n        description: index < tileInfo.length ? tileInfo[index] : \"\"\n    };\n}\n\nexport default function BlockPalette() {\n    const [blocks, setBlocks] = useState([] as Array<BlockInfo>);\n    const [open, setOpen] = useState(true);\n\n    const {leftClickTileId, rightClickTileId, setLeftClickTileId, setRightClickTileId} = useEditorState();\n\n    useEffect(() => {\n        setBlocks(getBlocks());\n    }, []);\n\n    function handleBlockSelection(evt: React.MouseEvent, id: number) {\n        if (evt.button === 0) {\n            setLeftClickTileId(id);\n        } else if (evt.button === 2) {\n            setRightClickTileId(id);\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n    }\n\n    return (\n        <div\n            className=\"BlockPalette\"\n            style={{left: open ? 0 : \"-15rem\"}}\n        >\n            <ul>\n                {blocks.map(b => {\n                    let selectionClass = \"\";\n                    if (leftClickTileId === b.id) {\n                        selectionClass = \"LeftClick\";\n                        if (rightClickTileId === b.id) {\n                            selectionClass = \"LeftRightClick\"\n                        }\n                    } else if (rightClickTileId === b.id) {\n                        selectionClass = \"RightClick\";\n                    }\n                    return(\n                        <li\n                            key={b.id}\n                            className={selectionClass}\n                            onClick={ (evt) => handleBlockSelection(evt, b.id) }\n                            onContextMenu={ (evt) => handleBlockSelection(evt, b.id)}\n                        >\n                            <div\n                                className=\"BlockImage\"\n                                style={{\n                                    backgroundPositionX: `${b.xOffset}px`,\n                                    backgroundPositionY: `${b.yOffset}px`\n                                }}\n                            ></div>\n                            <div className=\"BlockDescription\">{b.description}</div>\n                        </li>\n                    );\n                })}\n            </ul>\n\n            <div\n                className=\"CollapseBlockPalette\"\n                onClick={() => setOpen(o => !o)}\n            >{ open ? \"<\" : \">\" }</div>\n        </div>\n    );\n}","import React from \"react\";\nimport useEditorState from \"../../hooks/useEditorState\";\n\nfunction getOffsetForTileId(index: number) {\n    return {\n        xOffset: index % 16 * -32,\n        yOffset: Math.floor(index / 16) * -32\n    };\n}\n\nexport default function TileGrid(props: {\n    tiles: Array<number>,\n    onTilePlaced(index: number, button: number):void,\n    onTilePicked(tileId: number): void\n}) {\n    const {leftClickPressed, rightClickPressed, leftClickTileId, rightClickTileId, setLeftClickPressed, setRightClickPressed} = useEditorState();\n\n    function handleMouseDown(index: number, evt: React.MouseEvent) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        if (evt.button === 0) {\n            setLeftClickPressed(true);\n            setRightClickPressed(false);\n            props.onTilePlaced(index, leftClickTileId);\n        } else if (evt.button === 1) {\n            setLeftClickPressed(false);\n            setRightClickPressed(false);\n            props.onTilePicked(props.tiles[index]);\n        } else if (evt.button === 2) {\n            setLeftClickPressed(false);\n            setRightClickPressed(true);\n            props.onTilePlaced(index, rightClickTileId);\n        }\n    }\n\n    function handleMouseMove(index: number, evt: React.MouseEvent) {\n        if (leftClickPressed) {\n            props.onTilePlaced(index, leftClickTileId);\n        } else if (rightClickPressed) {\n            props.onTilePlaced(index, rightClickTileId);\n        }\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n\n    return (\n        <div\n            className=\"TileGrid\"\n        >\n            {props.tiles.map((tileId, index) => {\n                const offset = getOffsetForTileId(tileId);\n                return (\n                    <div\n                        key={index}\n                        className=\"Tile\" \n                        style={{\n                            backgroundPositionX: offset.xOffset,\n                            backgroundPositionY: offset.yOffset\n                        }}\n                        onMouseDown={(evt) => handleMouseDown(index, evt)}\n                        onMouseMove={(evt) => handleMouseMove(index, evt)}\n                    />\n                );\n            })}\n        </div>\n    );\n}","import useEditorState from \"../../hooks/useEditorState\";\nimport \"./LevelEditor.css\";\nimport TileGrid from \"./TileGrid\";\n\nexport default function LevelEditor() {\n    const {\n        foregroundVisible,\n        toggleForegroundVisible,\n        backgroundTiles,\n        foregroundTiles,\n        placeBackgroundTileAtIndex,\n        placeForegroundTileAtIndex,\n        pickTile,\n        mobs\n    } = useEditorState();\n\n    return (\n        <div className=\"LevelEditor\">\n            <div className=\"TileGridHolder\">\n                <TileGrid\n                    tiles={backgroundTiles}\n                    onTilePicked={pickTile}\n                    onTilePlaced={placeBackgroundTileAtIndex}\n                />\n                {foregroundVisible ? <TileGrid\n                    tiles={foregroundTiles}\n                    onTilePicked={pickTile}\n                    onTilePlaced={placeForegroundTileAtIndex}\n                /> : null}\n                <div\n                    className=\"LayerTab\"\n                    onClick={toggleForegroundVisible}\n                    style={{ backgroundColor: foregroundVisible ? \"#6888e8\" : \"#e09038\" }}\n                >\n                    Editing: {foregroundVisible ? \"Foreground\" : \"Background\"}\n                </div>\n                {\n                    mobs.map(m => {\n                        const pathStartString = `M ${m.startingCoordinates.x} ${m.startingCoordinates.y}`;\n                        const pathContinuationString = m.pathCoordinates.map(p => `L ${p.x} ${p.y}`)\n                        const pathString = [pathStartString, ...pathContinuationString].join(\" \");\n                        return (\n                            <>\n                                {\n                                    pathString.length > 1 &&\n                                    <svg width=\"640\" height=\"480\" className=\"MobPath\">\n                                        <path stroke=\"#FF00FF\" strokeWidth=\"2\" d={pathString} />\n                                    </svg>\n                                }\n                                <div\n                                    className=\"Mob\"\n                                    style={{\n                                        left: m.startingCoordinates.x,\n                                        bottom: 480 - m.startingCoordinates.y,\n                                    }}\n                                >\n                                    <img\n                                        src={`${process.env.PUBLIC_URL}/img/${m.name}.gif`}\n                                        alt={m.name}\n                                    />\n                                </div>\n                                {m.pathCoordinates.map(pc => {\n                                    return (\n                                        <div\n                                            className=\"Mob\"\n                                            style={{\n                                                opacity: 0.5,\n                                                left: pc.x,\n                                                bottom: 480 - pc.y,\n                                            }}\n                                        >\n                                            <img\n                                                src={`${process.env.PUBLIC_URL}/img/${m.name}.gif`}\n                                                alt={m.name}\n                                            />\n                                        </div>\n                                    );\n                                })}\n                            </>\n                        );\n                    })\n                }\n            </div>\n        </div>\n    );\n}","import Mob from \"../../models/mob\";\r\n\r\nexport default function MobInfo(props: { mob: Mob }) {\r\n    let { mob } = props;\r\n    return (\r\n        <li>\r\n            <div>{mob.name}</div>\r\n            <div>Starting Coordinates</div>\r\n            <div>\r\n                {mob.startingCoordinates.x}, {mob.startingCoordinates.y}\r\n            </div>\r\n            <div><input type=\"checkbox\" disabled checked={!!mob.extraData} /> Has extra data?</div>\r\n            <div><input type=\"checkbox\" disabled checked={!!mob.flippedH} /> Flipped horizontally?</div>\r\n            <div>Path Coordinates</div>\r\n            <div>\r\n                {mob.pathCoordinates.map(\r\n                    pc => {\r\n                        return <div>{pc.x}, {pc.y}</div>;\r\n                    }\r\n                )}\r\n            </div>\r\n        </li>\r\n    );\r\n}","import { useState } from \"react\";\nimport useEditorState from \"../../hooks/useEditorState\";\nimport MobInfo from \"./MobInfo\";\nimport \"./MobSidebar.css\";\n\nexport default function MobSidebar() {\n    const [open, setOpen] = useState(false);\n    const {mobs} = useEditorState();\n    return (\n        <div\n            className=\"MobSidebar\"\n            style={{right: open ? 0 : \"-15rem\"}}\n        >\n            <ul>\n                {mobs.map(m => <MobInfo mob={m} />)}\n            </ul>\n            <div\n                className=\"CollapseMobSidebar\"\n                onClick={() => setOpen(o => !o)}\n            >{ open ? \">\" : \"<\" }</div>\n        </div>\n    );\n}","import './App.css';\nimport HeaderBar from './components/HeaderBar/HeaderBar';\nimport BlockPalette from './components/BlockPalette/BlockPalette';\nimport LevelEditor from './components/LevelEditor/LevelEditor';\nimport MobSidebar from './components/MobSidebar/MobSidebar';\nimport useEditorState from './hooks/useEditorState';\n\nfunction App() {\n  const { setLeftClickPressed, setRightClickPressed } = useEditorState()\n  return (\n    <div className=\"App\"\n      onMouseUp={ () => {\n        setLeftClickPressed(false);\n        setRightClickPressed(false);\n      } }\n\n      onContextMenu={ (evt) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n      } }\n    >\n      <HeaderBar />\n      <div className=\"ContentContainer\">\n        <BlockPalette />\n        <LevelEditor />\n        <MobSidebar />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { EditorStateProvider } from './hooks/useEditorState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <EditorStateProvider>\n        <App />\n    </EditorStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}